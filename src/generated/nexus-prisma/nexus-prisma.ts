/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Pokemon: PokemonObject
      PokemonAttack: PokemonAttackObject
      Attack: AttackObject
      PokemonConnection: PokemonConnectionObject
      PageInfo: PageInfoObject
      PokemonEdge: PokemonEdgeObject
      AggregatePokemon: AggregatePokemonObject
      PokemonAttackConnection: PokemonAttackConnectionObject
      PokemonAttackEdge: PokemonAttackEdgeObject
      AggregatePokemonAttack: AggregatePokemonAttackObject
      AttackConnection: AttackConnectionObject
      AttackEdge: AttackEdgeObject
      AggregateAttack: AggregateAttackObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PokemonSubscriptionPayload: PokemonSubscriptionPayloadObject
      PokemonPreviousValues: PokemonPreviousValuesObject
      PokemonAttackSubscriptionPayload: PokemonAttackSubscriptionPayloadObject
      PokemonAttackPreviousValues: PokemonAttackPreviousValuesObject
      AttackSubscriptionPayload: AttackSubscriptionPayloadObject
      AttackPreviousValues: AttackPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Pokemon: PokemonFieldDetails
      PokemonAttack: PokemonAttackFieldDetails
      Attack: AttackFieldDetails
      PokemonConnection: PokemonConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PokemonEdge: PokemonEdgeFieldDetails
      AggregatePokemon: AggregatePokemonFieldDetails
      PokemonAttackConnection: PokemonAttackConnectionFieldDetails
      PokemonAttackEdge: PokemonAttackEdgeFieldDetails
      AggregatePokemonAttack: AggregatePokemonAttackFieldDetails
      AttackConnection: AttackConnectionFieldDetails
      AttackEdge: AttackEdgeFieldDetails
      AggregateAttack: AggregateAttackFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PokemonSubscriptionPayload: PokemonSubscriptionPayloadFieldDetails
      PokemonPreviousValues: PokemonPreviousValuesFieldDetails
      PokemonAttackSubscriptionPayload: PokemonAttackSubscriptionPayloadFieldDetails
      PokemonAttackPreviousValues: PokemonAttackPreviousValuesFieldDetails
      AttackSubscriptionPayload: AttackSubscriptionPayloadFieldDetails
      AttackPreviousValues: AttackPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PokemonWhereUniqueInput: PokemonWhereUniqueInputInputObject
      AttackWhereInput: AttackWhereInputInputObject
      PokemonWhereInput: PokemonWhereInputInputObject
      PokemonAttackWhereInput: PokemonAttackWhereInputInputObject
      PokemonAttackWhereUniqueInput: PokemonAttackWhereUniqueInputInputObject
      AttackWhereUniqueInput: AttackWhereUniqueInputInputObject
      PokemonCreateInput: PokemonCreateInputInputObject
      PokemonAttackCreateOneInput: PokemonAttackCreateOneInputInputObject
      PokemonAttackCreateInput: PokemonAttackCreateInputInputObject
      AttackCreateManyInput: AttackCreateManyInputInputObject
      AttackCreateInput: AttackCreateInputInputObject
      PokemonUpdateInput: PokemonUpdateInputInputObject
      PokemonAttackUpdateOneInput: PokemonAttackUpdateOneInputInputObject
      PokemonAttackUpdateDataInput: PokemonAttackUpdateDataInputInputObject
      AttackUpdateManyInput: AttackUpdateManyInputInputObject
      AttackUpdateWithWhereUniqueNestedInput: AttackUpdateWithWhereUniqueNestedInputInputObject
      AttackUpdateDataInput: AttackUpdateDataInputInputObject
      AttackUpsertWithWhereUniqueNestedInput: AttackUpsertWithWhereUniqueNestedInputInputObject
      AttackScalarWhereInput: AttackScalarWhereInputInputObject
      AttackUpdateManyWithWhereNestedInput: AttackUpdateManyWithWhereNestedInputInputObject
      AttackUpdateManyDataInput: AttackUpdateManyDataInputInputObject
      PokemonAttackUpsertNestedInput: PokemonAttackUpsertNestedInputInputObject
      PokemonUpdateManyMutationInput: PokemonUpdateManyMutationInputInputObject
      PokemonAttackUpdateInput: PokemonAttackUpdateInputInputObject
      AttackUpdateInput: AttackUpdateInputInputObject
      AttackUpdateManyMutationInput: AttackUpdateManyMutationInputInputObject
      PokemonSubscriptionWhereInput: PokemonSubscriptionWhereInputInputObject
      PokemonAttackSubscriptionWhereInput: PokemonAttackSubscriptionWhereInputInputObject
      AttackSubscriptionWhereInput: AttackSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    AttackOrderByInput: AttackOrderByInputValues,
    PokemonOrderByInput: PokemonOrderByInputValues,
    PokemonAttackOrderByInput: PokemonAttackOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'pokemon', args?: QueryPokemonArgs[] | false, alias?: string  } 
  | { name: 'pokemons', args?: QueryPokemonsArgs[] | false, alias?: string  } 
  | { name: 'pokemonsConnection', args?: QueryPokemonsConnectionArgs[] | false, alias?: string  } 
  | { name: 'pokemonAttack', args?: QueryPokemonAttackArgs[] | false, alias?: string  } 
  | { name: 'pokemonAttacks', args?: QueryPokemonAttacksArgs[] | false, alias?: string  } 
  | { name: 'pokemonAttacksConnection', args?: QueryPokemonAttacksConnectionArgs[] | false, alias?: string  } 
  | { name: 'attack', args?: QueryAttackArgs[] | false, alias?: string  } 
  | { name: 'attacks', args?: QueryAttacksArgs[] | false, alias?: string  } 
  | { name: 'attacksConnection', args?: QueryAttacksConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'pokemon'
  | 'pokemons'
  | 'pokemonsConnection'
  | 'pokemonAttack'
  | 'pokemonAttacks'
  | 'pokemonAttacksConnection'
  | 'attack'
  | 'attacks'
  | 'attacksConnection'


type QueryPokemonArgs =
  | 'where'
type QueryPokemonsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPokemonsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPokemonAttackArgs =
  | 'where'
type QueryPokemonAttacksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPokemonAttacksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttackArgs =
  | 'where'
type QueryAttacksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttacksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  pokemon: {
    type: 'Pokemon'
    args: Record<QueryPokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PokemonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  pokemons: {
    type: 'Pokemon'
    args: Record<QueryPokemonsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PokemonWhereInput | null, orderBy?: prisma.PokemonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon[]> | prisma.Pokemon[]
  }
  pokemonsConnection: {
    type: 'PokemonConnection'
    args: Record<QueryPokemonsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PokemonWhereInput | null, orderBy?: prisma.PokemonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonConnection> | prisma.PokemonConnection
  }
  pokemonAttack: {
    type: 'PokemonAttack'
    args: Record<QueryPokemonAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PokemonAttackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack | null> | prisma.PokemonAttack | null
  }
  pokemonAttacks: {
    type: 'PokemonAttack'
    args: Record<QueryPokemonAttacksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PokemonAttackWhereInput | null, orderBy?: prisma.PokemonAttackOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack[]> | prisma.PokemonAttack[]
  }
  pokemonAttacksConnection: {
    type: 'PokemonAttackConnection'
    args: Record<QueryPokemonAttacksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PokemonAttackWhereInput | null, orderBy?: prisma.PokemonAttackOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttackConnection> | prisma.PokemonAttackConnection
  }
  attack: {
    type: 'Attack'
    args: Record<QueryAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AttackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack | null> | prisma.Attack | null
  }
  attacks: {
    type: 'Attack'
    args: Record<QueryAttacksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttackWhereInput | null, orderBy?: prisma.AttackOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack[]> | prisma.Attack[]
  }
  attacksConnection: {
    type: 'AttackConnection'
    args: Record<QueryAttacksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttackWhereInput | null, orderBy?: prisma.AttackOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttackConnection> | prisma.AttackConnection
  }
}
  

// Types for Pokemon

type PokemonObject =
  | PokemonFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'attacks', args?: [] | false, alias?: string  } 

type PokemonFields =
  | 'id'
  | 'number'
  | 'name'
  | 'attacks'



  

export interface PokemonFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  attacks: {
    type: 'PokemonAttack'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Pokemon">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack | null> | prisma.PokemonAttack | null
  }
}
  

// Types for PokemonAttack

type PokemonAttackObject =
  | PokemonAttackFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'special', args?: PokemonAttackSpecialArgs[] | false, alias?: string  } 

type PokemonAttackFields =
  | 'id'
  | 'special'


type PokemonAttackSpecialArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PokemonAttackFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  special: {
    type: 'Attack'
    args: Record<PokemonAttackSpecialArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonAttack">,
      args: { where?: AttackWhereInput | null, orderBy?: prisma.AttackOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack[]> | prisma.Attack[]
  }
}
  

// Types for Attack

type AttackObject =
  | AttackFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'damage', args?: [] | false, alias?: string  } 

type AttackFields =
  | 'id'
  | 'name'
  | 'damage'



  

export interface AttackFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  damage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PokemonConnection

type PokemonConnectionObject =
  | PokemonConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PokemonConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PokemonConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PokemonEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonEdge[]> | prisma.PokemonEdge[]
  }
  aggregate: {
    type: 'AggregatePokemon'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePokemon> | prisma.AggregatePokemon
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PokemonEdge

type PokemonEdgeObject =
  | PokemonEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PokemonEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PokemonEdgeFieldDetails {
  node: {
    type: 'Pokemon'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon> | prisma.Pokemon
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePokemon

type AggregatePokemonObject =
  | AggregatePokemonFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePokemonFields =
  | 'count'



  

export interface AggregatePokemonFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PokemonAttackConnection

type PokemonAttackConnectionObject =
  | PokemonAttackConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PokemonAttackConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PokemonAttackConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonAttackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PokemonAttackEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonAttackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttackEdge[]> | prisma.PokemonAttackEdge[]
  }
  aggregate: {
    type: 'AggregatePokemonAttack'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonAttackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePokemonAttack> | prisma.AggregatePokemonAttack
  }
}
  

// Types for PokemonAttackEdge

type PokemonAttackEdgeObject =
  | PokemonAttackEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PokemonAttackEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PokemonAttackEdgeFieldDetails {
  node: {
    type: 'PokemonAttack'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonAttackEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack> | prisma.PokemonAttack
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePokemonAttack

type AggregatePokemonAttackObject =
  | AggregatePokemonAttackFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePokemonAttackFields =
  | 'count'



  

export interface AggregatePokemonAttackFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttackConnection

type AttackConnectionObject =
  | AttackConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AttackConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AttackConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AttackEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AttackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttackEdge[]> | prisma.AttackEdge[]
  }
  aggregate: {
    type: 'AggregateAttack'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttackConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAttack> | prisma.AggregateAttack
  }
}
  

// Types for AttackEdge

type AttackEdgeObject =
  | AttackEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AttackEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AttackEdgeFieldDetails {
  node: {
    type: 'Attack'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttackEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack> | prisma.Attack
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAttack

type AggregateAttackObject =
  | AggregateAttackFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAttackFields =
  | 'count'



  

export interface AggregateAttackFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPokemon', args?: MutationCreatePokemonArgs[] | false, alias?: string  } 
  | { name: 'updatePokemon', args?: MutationUpdatePokemonArgs[] | false, alias?: string  } 
  | { name: 'updateManyPokemons', args?: MutationUpdateManyPokemonsArgs[] | false, alias?: string  } 
  | { name: 'upsertPokemon', args?: MutationUpsertPokemonArgs[] | false, alias?: string  } 
  | { name: 'deletePokemon', args?: MutationDeletePokemonArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPokemons', args?: MutationDeleteManyPokemonsArgs[] | false, alias?: string  } 
  | { name: 'createPokemonAttack', args?: MutationCreatePokemonAttackArgs[] | false, alias?: string  } 
  | { name: 'updatePokemonAttack', args?: MutationUpdatePokemonAttackArgs[] | false, alias?: string  } 
  | { name: 'upsertPokemonAttack', args?: MutationUpsertPokemonAttackArgs[] | false, alias?: string  } 
  | { name: 'deletePokemonAttack', args?: MutationDeletePokemonAttackArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPokemonAttacks', args?: MutationDeleteManyPokemonAttacksArgs[] | false, alias?: string  } 
  | { name: 'createAttack', args?: MutationCreateAttackArgs[] | false, alias?: string  } 
  | { name: 'updateAttack', args?: MutationUpdateAttackArgs[] | false, alias?: string  } 
  | { name: 'updateManyAttacks', args?: MutationUpdateManyAttacksArgs[] | false, alias?: string  } 
  | { name: 'upsertAttack', args?: MutationUpsertAttackArgs[] | false, alias?: string  } 
  | { name: 'deleteAttack', args?: MutationDeleteAttackArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAttacks', args?: MutationDeleteManyAttacksArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPokemon'
  | 'updatePokemon'
  | 'updateManyPokemons'
  | 'upsertPokemon'
  | 'deletePokemon'
  | 'deleteManyPokemons'
  | 'createPokemonAttack'
  | 'updatePokemonAttack'
  | 'upsertPokemonAttack'
  | 'deletePokemonAttack'
  | 'deleteManyPokemonAttacks'
  | 'createAttack'
  | 'updateAttack'
  | 'updateManyAttacks'
  | 'upsertAttack'
  | 'deleteAttack'
  | 'deleteManyAttacks'


type MutationCreatePokemonArgs =
  | 'data'
type MutationUpdatePokemonArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPokemonsArgs =
  | 'data'
  | 'where'
type MutationUpsertPokemonArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePokemonArgs =
  | 'where'
type MutationDeleteManyPokemonsArgs =
  | 'where'
type MutationCreatePokemonAttackArgs =
  | 'data'
type MutationUpdatePokemonAttackArgs =
  | 'data'
  | 'where'
type MutationUpsertPokemonAttackArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePokemonAttackArgs =
  | 'where'
type MutationDeleteManyPokemonAttacksArgs =
  | 'where'
type MutationCreateAttackArgs =
  | 'data'
type MutationUpdateAttackArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAttacksArgs =
  | 'data'
  | 'where'
type MutationUpsertAttackArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAttackArgs =
  | 'where'
type MutationDeleteManyAttacksArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPokemon: {
    type: 'Pokemon'
    args: Record<MutationCreatePokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon> | prisma.Pokemon
  }
  updatePokemon: {
    type: 'Pokemon'
    args: Record<MutationUpdatePokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonUpdateInput, where: PokemonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  updateManyPokemons: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPokemonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonUpdateManyMutationInput, where?: PokemonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPokemon: {
    type: 'Pokemon'
    args: Record<MutationUpsertPokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PokemonWhereUniqueInput, create: PokemonCreateInput, update: PokemonUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon> | prisma.Pokemon
  }
  deletePokemon: {
    type: 'Pokemon'
    args: Record<MutationDeletePokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PokemonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  deleteManyPokemons: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPokemonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PokemonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPokemonAttack: {
    type: 'PokemonAttack'
    args: Record<MutationCreatePokemonAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonAttackCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack> | prisma.PokemonAttack
  }
  updatePokemonAttack: {
    type: 'PokemonAttack'
    args: Record<MutationUpdatePokemonAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonAttackUpdateInput, where: PokemonAttackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack | null> | prisma.PokemonAttack | null
  }
  upsertPokemonAttack: {
    type: 'PokemonAttack'
    args: Record<MutationUpsertPokemonAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PokemonAttackWhereUniqueInput, create: PokemonAttackCreateInput, update: PokemonAttackUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack> | prisma.PokemonAttack
  }
  deletePokemonAttack: {
    type: 'PokemonAttack'
    args: Record<MutationDeletePokemonAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PokemonAttackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack | null> | prisma.PokemonAttack | null
  }
  deleteManyPokemonAttacks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPokemonAttacksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PokemonAttackWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAttack: {
    type: 'Attack'
    args: Record<MutationCreateAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttackCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack> | prisma.Attack
  }
  updateAttack: {
    type: 'Attack'
    args: Record<MutationUpdateAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttackUpdateInput, where: AttackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack | null> | prisma.Attack | null
  }
  updateManyAttacks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAttacksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttackUpdateManyMutationInput, where?: AttackWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAttack: {
    type: 'Attack'
    args: Record<MutationUpsertAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttackWhereUniqueInput, create: AttackCreateInput, update: AttackUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack> | prisma.Attack
  }
  deleteAttack: {
    type: 'Attack'
    args: Record<MutationDeleteAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttackWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack | null> | prisma.Attack | null
  }
  deleteManyAttacks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAttacksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AttackWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'pokemon', args?: SubscriptionPokemonArgs[] | false, alias?: string  } 
  | { name: 'pokemonAttack', args?: SubscriptionPokemonAttackArgs[] | false, alias?: string  } 
  | { name: 'attack', args?: SubscriptionAttackArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'pokemon'
  | 'pokemonAttack'
  | 'attack'


type SubscriptionPokemonArgs =
  | 'where'
type SubscriptionPokemonAttackArgs =
  | 'where'
type SubscriptionAttackArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  pokemon: {
    type: 'PokemonSubscriptionPayload'
    args: Record<SubscriptionPokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PokemonSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonSubscriptionPayload | null> | prisma.PokemonSubscriptionPayload | null
  }
  pokemonAttack: {
    type: 'PokemonAttackSubscriptionPayload'
    args: Record<SubscriptionPokemonAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PokemonAttackSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttackSubscriptionPayload | null> | prisma.PokemonAttackSubscriptionPayload | null
  }
  attack: {
    type: 'AttackSubscriptionPayload'
    args: Record<SubscriptionAttackArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AttackSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttackSubscriptionPayload | null> | prisma.AttackSubscriptionPayload | null
  }
}
  

// Types for PokemonSubscriptionPayload

type PokemonSubscriptionPayloadObject =
  | PokemonSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PokemonSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PokemonSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Pokemon'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PokemonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PokemonPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PokemonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonPreviousValues | null> | prisma.PokemonPreviousValues | null
  }
}
  

// Types for PokemonPreviousValues

type PokemonPreviousValuesObject =
  | PokemonPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type PokemonPreviousValuesFields =
  | 'id'
  | 'number'
  | 'name'



  

export interface PokemonPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PokemonAttackSubscriptionPayload

type PokemonAttackSubscriptionPayloadObject =
  | PokemonAttackSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PokemonAttackSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PokemonAttackSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonAttackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PokemonAttack'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PokemonAttackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttack | null> | prisma.PokemonAttack | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PokemonAttackPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PokemonAttackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonAttackPreviousValues | null> | prisma.PokemonAttackPreviousValues | null
  }
}
  

// Types for PokemonAttackPreviousValues

type PokemonAttackPreviousValuesObject =
  | PokemonAttackPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type PokemonAttackPreviousValuesFields =
  | 'id'



  

export interface PokemonAttackPreviousValuesFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttackSubscriptionPayload

type AttackSubscriptionPayloadObject =
  | AttackSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AttackSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AttackSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Attack'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attack | null> | prisma.Attack | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AttackPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttackSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttackPreviousValues | null> | prisma.AttackPreviousValues | null
  }
}
  

// Types for AttackPreviousValues

type AttackPreviousValuesObject =
  | AttackPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'damage', args?: [] | false, alias?: string  } 

type AttackPreviousValuesFields =
  | 'id'
  | 'name'
  | 'damage'



  

export interface AttackPreviousValuesFieldDetails {
  id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  damage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface PokemonWhereUniqueInput {
  id?: string | null
  number?: number | null
}
export type PokemonWhereUniqueInputInputObject =
  | Extract<keyof PokemonWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'number', alias?: string  } 
  
export interface AttackWhereInput {
  id?: number | null
  id_not?: number | null
  id_in?: number[]
  id_not_in?: number[]
  id_lt?: number | null
  id_lte?: number | null
  id_gt?: number | null
  id_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  damage?: string | null
  damage_not?: string | null
  damage_in?: string[]
  damage_not_in?: string[]
  damage_lt?: string | null
  damage_lte?: string | null
  damage_gt?: string | null
  damage_gte?: string | null
  damage_contains?: string | null
  damage_not_contains?: string | null
  damage_starts_with?: string | null
  damage_not_starts_with?: string | null
  damage_ends_with?: string | null
  damage_not_ends_with?: string | null
  AND?: AttackWhereInput[]
  OR?: AttackWhereInput[]
  NOT?: AttackWhereInput[]
}
export type AttackWhereInputInputObject =
  | Extract<keyof AttackWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'damage', alias?: string  } 
  | { name: 'damage_not', alias?: string  } 
  | { name: 'damage_in', alias?: string  } 
  | { name: 'damage_not_in', alias?: string  } 
  | { name: 'damage_lt', alias?: string  } 
  | { name: 'damage_lte', alias?: string  } 
  | { name: 'damage_gt', alias?: string  } 
  | { name: 'damage_gte', alias?: string  } 
  | { name: 'damage_contains', alias?: string  } 
  | { name: 'damage_not_contains', alias?: string  } 
  | { name: 'damage_starts_with', alias?: string  } 
  | { name: 'damage_not_starts_with', alias?: string  } 
  | { name: 'damage_ends_with', alias?: string  } 
  | { name: 'damage_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PokemonWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  attacks?: PokemonAttackWhereInput | null
  AND?: PokemonWhereInput[]
  OR?: PokemonWhereInput[]
  NOT?: PokemonWhereInput[]
}
export type PokemonWhereInputInputObject =
  | Extract<keyof PokemonWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'attacks', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PokemonAttackWhereInput {
  id?: number | null
  id_not?: number | null
  id_in?: number[]
  id_not_in?: number[]
  id_lt?: number | null
  id_lte?: number | null
  id_gt?: number | null
  id_gte?: number | null
  special_every?: AttackWhereInput | null
  special_some?: AttackWhereInput | null
  special_none?: AttackWhereInput | null
  AND?: PokemonAttackWhereInput[]
  OR?: PokemonAttackWhereInput[]
  NOT?: PokemonAttackWhereInput[]
}
export type PokemonAttackWhereInputInputObject =
  | Extract<keyof PokemonAttackWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'special_every', alias?: string  } 
  | { name: 'special_some', alias?: string  } 
  | { name: 'special_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PokemonAttackWhereUniqueInput {
  id?: number | null
}
export type PokemonAttackWhereUniqueInputInputObject =
  | Extract<keyof PokemonAttackWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AttackWhereUniqueInput {
  id?: number | null
}
export type AttackWhereUniqueInputInputObject =
  | Extract<keyof AttackWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PokemonCreateInput {
  id?: string | null
  number?: number
  name?: string
  attacks?: PokemonAttackCreateOneInput | null
}
export type PokemonCreateInputInputObject =
  | Extract<keyof PokemonCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'attacks', alias?: string  } 
  
export interface PokemonAttackCreateOneInput {
  create?: PokemonAttackCreateInput | null
  connect?: PokemonAttackWhereUniqueInput | null
}
export type PokemonAttackCreateOneInputInputObject =
  | Extract<keyof PokemonAttackCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PokemonAttackCreateInput {
  id?: number | null
  special?: AttackCreateManyInput | null
}
export type PokemonAttackCreateInputInputObject =
  | Extract<keyof PokemonAttackCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'special', alias?: string  } 
  
export interface AttackCreateManyInput {
  create?: AttackCreateInput[]
  connect?: AttackWhereUniqueInput[]
}
export type AttackCreateManyInputInputObject =
  | Extract<keyof AttackCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AttackCreateInput {
  id?: number | null
  name?: string | null
  damage?: string | null
}
export type AttackCreateInputInputObject =
  | Extract<keyof AttackCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'damage', alias?: string  } 
  
export interface PokemonUpdateInput {
  number?: number | null
  name?: string | null
  attacks?: PokemonAttackUpdateOneInput | null
}
export type PokemonUpdateInputInputObject =
  | Extract<keyof PokemonUpdateInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'attacks', alias?: string  } 
  
export interface PokemonAttackUpdateOneInput {
  create?: PokemonAttackCreateInput | null
  update?: PokemonAttackUpdateDataInput | null
  upsert?: PokemonAttackUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PokemonAttackWhereUniqueInput | null
}
export type PokemonAttackUpdateOneInputInputObject =
  | Extract<keyof PokemonAttackUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PokemonAttackUpdateDataInput {
  special?: AttackUpdateManyInput | null
}
export type PokemonAttackUpdateDataInputInputObject =
  | Extract<keyof PokemonAttackUpdateDataInput, string>
  | { name: 'special', alias?: string  } 
  
export interface AttackUpdateManyInput {
  create?: AttackCreateInput[]
  update?: AttackUpdateWithWhereUniqueNestedInput[]
  upsert?: AttackUpsertWithWhereUniqueNestedInput[]
  delete?: AttackWhereUniqueInput[]
  connect?: AttackWhereUniqueInput[]
  set?: AttackWhereUniqueInput[]
  disconnect?: AttackWhereUniqueInput[]
  deleteMany?: AttackScalarWhereInput[]
  updateMany?: AttackUpdateManyWithWhereNestedInput[]
}
export type AttackUpdateManyInputInputObject =
  | Extract<keyof AttackUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AttackUpdateWithWhereUniqueNestedInput {
  where?: AttackWhereUniqueInput
  data?: AttackUpdateDataInput
}
export type AttackUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof AttackUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttackUpdateDataInput {
  name?: string | null
  damage?: string | null
}
export type AttackUpdateDataInputInputObject =
  | Extract<keyof AttackUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'damage', alias?: string  } 
  
export interface AttackUpsertWithWhereUniqueNestedInput {
  where?: AttackWhereUniqueInput
  update?: AttackUpdateDataInput
  create?: AttackCreateInput
}
export type AttackUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof AttackUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AttackScalarWhereInput {
  id?: number | null
  id_not?: number | null
  id_in?: number[]
  id_not_in?: number[]
  id_lt?: number | null
  id_lte?: number | null
  id_gt?: number | null
  id_gte?: number | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  damage?: string | null
  damage_not?: string | null
  damage_in?: string[]
  damage_not_in?: string[]
  damage_lt?: string | null
  damage_lte?: string | null
  damage_gt?: string | null
  damage_gte?: string | null
  damage_contains?: string | null
  damage_not_contains?: string | null
  damage_starts_with?: string | null
  damage_not_starts_with?: string | null
  damage_ends_with?: string | null
  damage_not_ends_with?: string | null
  AND?: AttackScalarWhereInput[]
  OR?: AttackScalarWhereInput[]
  NOT?: AttackScalarWhereInput[]
}
export type AttackScalarWhereInputInputObject =
  | Extract<keyof AttackScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'damage', alias?: string  } 
  | { name: 'damage_not', alias?: string  } 
  | { name: 'damage_in', alias?: string  } 
  | { name: 'damage_not_in', alias?: string  } 
  | { name: 'damage_lt', alias?: string  } 
  | { name: 'damage_lte', alias?: string  } 
  | { name: 'damage_gt', alias?: string  } 
  | { name: 'damage_gte', alias?: string  } 
  | { name: 'damage_contains', alias?: string  } 
  | { name: 'damage_not_contains', alias?: string  } 
  | { name: 'damage_starts_with', alias?: string  } 
  | { name: 'damage_not_starts_with', alias?: string  } 
  | { name: 'damage_ends_with', alias?: string  } 
  | { name: 'damage_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttackUpdateManyWithWhereNestedInput {
  where?: AttackScalarWhereInput
  data?: AttackUpdateManyDataInput
}
export type AttackUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AttackUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttackUpdateManyDataInput {
  name?: string | null
  damage?: string | null
}
export type AttackUpdateManyDataInputInputObject =
  | Extract<keyof AttackUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'damage', alias?: string  } 
  
export interface PokemonAttackUpsertNestedInput {
  update?: PokemonAttackUpdateDataInput
  create?: PokemonAttackCreateInput
}
export type PokemonAttackUpsertNestedInputInputObject =
  | Extract<keyof PokemonAttackUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PokemonUpdateManyMutationInput {
  number?: number | null
  name?: string | null
}
export type PokemonUpdateManyMutationInputInputObject =
  | Extract<keyof PokemonUpdateManyMutationInput, string>
  | { name: 'number', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PokemonAttackUpdateInput {
  special?: AttackUpdateManyInput | null
}
export type PokemonAttackUpdateInputInputObject =
  | Extract<keyof PokemonAttackUpdateInput, string>
  | { name: 'special', alias?: string  } 
  
export interface AttackUpdateInput {
  name?: string | null
  damage?: string | null
}
export type AttackUpdateInputInputObject =
  | Extract<keyof AttackUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'damage', alias?: string  } 
  
export interface AttackUpdateManyMutationInput {
  name?: string | null
  damage?: string | null
}
export type AttackUpdateManyMutationInputInputObject =
  | Extract<keyof AttackUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'damage', alias?: string  } 
  
export interface PokemonSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PokemonWhereInput | null
  AND?: PokemonSubscriptionWhereInput[]
  OR?: PokemonSubscriptionWhereInput[]
  NOT?: PokemonSubscriptionWhereInput[]
}
export type PokemonSubscriptionWhereInputInputObject =
  | Extract<keyof PokemonSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PokemonAttackSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PokemonAttackWhereInput | null
  AND?: PokemonAttackSubscriptionWhereInput[]
  OR?: PokemonAttackSubscriptionWhereInput[]
  NOT?: PokemonAttackSubscriptionWhereInput[]
}
export type PokemonAttackSubscriptionWhereInputInputObject =
  | Extract<keyof PokemonAttackSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttackSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AttackWhereInput | null
  AND?: AttackSubscriptionWhereInput[]
  OR?: AttackSubscriptionWhereInput[]
  NOT?: AttackSubscriptionWhereInput[]
}
export type AttackSubscriptionWhereInputInputObject =
  | Extract<keyof AttackSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type AttackOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'damage_ASC'
  | 'damage_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PokemonOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'number_ASC'
  | 'number_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PokemonAttackOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  